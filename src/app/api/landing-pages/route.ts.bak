import { NextResponse } from 'next/server';
import { performance } from 'node:perf_hooks';
import { getTemplateByStyle } from '@/templates/landing-page-templates';
import { writeFile } from 'fs/promises';
import path from 'path';
import fs from 'fs';

// Função para fornecer CSS padrão com base no estilo selecionado
function getDefaultCSS(style: string): string {
  // CSS base comum a todos os estilos
  const baseCSS = `
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Montserrat', sans-serif;
      line-height: 1.6;
      color: #333;
    }
    
    .container {
      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
    }
    
    h1, h2, h3, h4, h5, h6 {
      margin-bottom: 20px;
      line-height: 1.2;
    }
    
    h1 {
      font-size: 2.5rem;
      font-weight: 900;
    }
    
    h2 {
      font-size: 2rem;
      font-weight: 700;
      text-align: center;
      margin-bottom: 40px;
    }
    
    h2 span {
      color: #007bff;
    }
    
    p {
      margin-bottom: 20px;
    }
    
    img {
      max-width: 100%;
      height: auto;
      display: block; /* Evita espaços em branco abaixo das imagens */
    }
    
    /* Fix para imagens quebradas */
    img[src=""], img:not([src]) {
      opacity: 0;
      background: #f0f0f0 url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg>') no-repeat center / 64px;
      min-height: 120px;
      border: 1px dashed #ccc;
    }
    
    section {
      padding: 80px 0;
    }
    
    .btn {
      display: inline-block;
      padding: 12px 30px;
      border-radius: 5px;
      text-decoration: none;
      text-align: center;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .btn-primary {
      background-color: #007bff;
      color: white;
    }
    
    .btn-primary:hover {
      background-color: #0069d9;
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .btn-large {
      padding: 15px 40px;
      font-size: 1.1rem;
      text-transform: uppercase;
    }
    
    .header {
      background-color: white;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      padding: 20px 0;
      position: sticky;
      top: 0;
      z-index: 1000;
    }
    
    .header .container {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .logo {
      font-size: 1.8rem;
      font-weight: 900;
      color: #333;
      text-decoration: none;
    }
    
    .logo span {
      color: #007bff;
    }
    
    .nav ul {
      display: flex;
      list-style: none;
    }
    
    .nav li {
      margin-left: 30px;
    }
    
    .nav a {
      color: #333;
      text-decoration: none;
      font-weight: 600;
      transition: color 0.3s ease;
    }
    
    .hero {
      background-color: #f8f9fa;
      padding: 80px 0;
    }
    
    .hero .container {
      display: flex;
      align-items: center;
      gap: 40px;
    }
    
    .hero-content {
      flex: 1;
    }
    
    .hero-image {
      flex: 1;
      background-size: cover;
      background-position: center;
      height: 400px;
      border-radius: 10px;
      position: relative;
    }
    
    .secure-checkout {
      display: flex;
      align-items: center;
      margin-top: 20px;
      font-size: 0.9rem;
      color: #6c757d;
    }
    
    .secure-checkout i {
      margin-right: 10px;
    }
    
    .features {
      background-color: white;
    }
    
    .features-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 30px;
    }
    
    .feature-card {
      background-color: #f8f9fa;
      padding: 30px;
      border-radius: 10px;
      text-align: center;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: transform 0.3s ease;
    }
    
    .feature-icon {
      font-size: 2.5rem;
      color: #007bff;
      margin-bottom: 20px;
    }
    
    .feature-card:hover {
      transform: translateY(-10px);
    }
    
    .steps {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 30px;
      counter-reset: step-counter;
    }
    
    .step {
      background-color: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      text-align: center;
      position: relative;
    }
    
    .step-number {
      background-color: #007bff;
      color: white;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 700;
      margin: 0 auto 20px;
    }
    
    .testimonials {
      background-color: #f8f9fa;
    }
    
    .testimonials-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 30px;
    }
    
    .testimonial-card {
      background-color: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    }
    
    .testimonial-header {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-bottom: 20px;
    }
    
    .client-photo {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background-size: cover;
      background-position: center;
    }
    
    .rating {
      color: #ffc107;
      font-size: 0.9rem;
    }
    
    .faq {
      background-color: white;
    }
    
    .accordion {
      max-width: 800px;
      margin: 0 auto;
    }
    
    .accordion-item {
      margin-bottom: 15px;
      border-radius: 5px;
      overflow: hidden;
      border: 1px solid #dee2e6;
    }
    
    .accordion-header, .faq-question {
      background-color: #f8f9fa;
      padding: 15px 20px;
      width: 100%;
      text-align: left;
      font-weight: 600;
      cursor: pointer;
      border: none;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: background-color 0.3s ease;
    }
    
    .accordion-header:hover, .faq-question:hover {
      background-color: #e9ecef;
    }
    
    .accordion-content, .faq-answer {
      padding: 0 20px;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease-out;
      background-color: white;
    }
    
    .accordion-content p, .faq-answer p {
      padding: 20px 0;
    }
    
    .accordion-item.active .accordion-content, 
    .faq-item.active .faq-answer {
      max-height: 500px;
    }
    
    /* Estilos específicos para FAQs alternativas */
    .faq-container {
      max-width: 800px;
      margin: 0 auto;
    }
    
    .faq-item {
      margin-bottom: 15px;
      border-radius: 5px;
      border: 1px solid #dee2e6;
      overflow: hidden;
    }
    
    .faq-question {
      background-color: #f8f9fa;
      border-bottom: 1px solid transparent;
    }
    
    .faq-item.active .faq-question {
      border-bottom-color: #dee2e6;
    }
    
    .faq-question i {
      transition: transform 0.3s ease;
    }
    
    .faq-item.active .faq-question i {
      transform: rotate(180deg);
    }
    
    .footer {
      background-color: #212529;
      color: white;
      padding: 60px 0 20px;
    }
    
    .footer-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 30px;
      margin-bottom: 40px;
    }
    
    .footer h4 {
      color: white;
      margin-bottom: 25px;
      font-size: 1.2rem;
    }
    
    .footer ul {
      list-style: none;
    }
    
    .footer li {
      margin-bottom: 10px;
    }
    
    .footer a {
      color: #adb5bd;
      text-decoration: none;
      transition: color 0.3s ease;
    }
    
    .footer a:hover {
      color: white;
    }
    
    .social-links {
      display: flex;
      gap: 15px;
      margin-top: 20px;
    }
    
    .social-links a {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      background-color: rgba(255,255,255,0.1);
      border-radius: 50%;
      transition: background-color 0.3s ease;
    }
    
    .social-links a:hover {
      background-color: #007bff;
    }
    
    .footer-bottom {
      text-align: center;
      padding-top: 20px;
      border-top: 1px solid rgba(255,255,255,0.1);
      margin-top: 30px;
      font-size: 0.9rem;
      color: #adb5bd;
    }
    
    .countdown {
      background-color: rgba(0,123,255,0.1);
      padding: 15px;
      border-radius: 5px;
      margin: 20px 0;
      text-align: center;
    }
    
    #timer, #timer2 {
      font-size: 1.5rem;
      font-weight: 700;
      color: #dc3545;
    }
    
    .offer {
      background-color: #f8f9fa;
      padding: 80px 0;
    }
    
    .offer-content {
      max-width: 600px;
      margin: 0 auto;
      text-align: center;
    }
    
    .price-box {
      margin: 30px 0;
    }
    
    .price-old {
      text-decoration: line-through;
      color: #6c757d;
      font-size: 1.2rem;
    }
    
    .price-new {
      font-size: 2.5rem;
      font-weight: 900;
      color: #28a745;
      margin: 10px 0;
    }
    
    .price-installments {
      font-size: 1rem;
      color: #6c757d;
    }
    
    .offer-badge {
      display: inline-block;
      margin-top: 20px;
      padding: 10px 20px;
      background-color: rgba(40,167,69,0.1);
      color: #28a745;
      border-radius: 5px;
      font-weight: 600;
    }
    
    .offer-badge i {
      margin-right: 10px;
    }
    
    .animate-on-scroll {
      opacity: 0;
      transform: translateY(20px);
      transition: opacity 0.6s ease, transform 0.6s ease;
    }
    
    .animate-on-scroll.animated {
      opacity: 1;
      transform: translateY(0);
    }
    
    /* Estilo para botões FAQ não padronizados */
    button.faq-question {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
      padding: 15px 20px;
      background-color: #f8f9fa;
      border: none;
      border-radius: 5px;
      font-weight: 600;
      text-align: left;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    button.faq-question:hover {
      background-color: #e9ecef;
    }
    
    button.faq-question i {
      margin-left: 10px;
      transition: transform 0.3s ease;
    }
    
    button.faq-question[aria-expanded="true"] i {
      transform: rotate(180deg);
    }
    
    @media (max-width: 992px) {
      .hero .container {
        flex-direction: column;
      }
      
      .hero-content, .hero-image {
        flex: none;
        width: 100%;
      }
      
      .hero-image {
        margin-top: 40px;
      }
      
      h1 {
        font-size: 2rem;
      }
      
      h2 {
        font-size: 1.7rem;
      }
    }
    
    @media (max-width: 768px) {
      .nav ul {
        display: none;
      }
      
      section {
        padding: 60px 0;
      }
    }
  `;
  
  // CSS específico para cada estilo
  switch (style.toLowerCase()) {
    case 'minimalista':
      return `${baseCSS}
        body {
          color: #444;
          background-color: #fafafa;
        }
        
        h2 span {
          color: #444;
          border-bottom: 2px solid #444;
          padding-bottom: 5px;
        }
        
        .btn-primary {
          background-color: #333;
          color: white;
        }
        
        .btn-primary:hover {
          background-color: #555;
        }
        
        .header {
          background-color: white;
        }
        
        .logo span {
          color: #333;
        }
        
        .feature-icon {
          color: #333;
        }
        
        .step-number {
          background-color: #333;
        }
        
        .footer {
          background-color: #f0f0f0;
          color: #333;
        }
        
        .footer h4 {
          color: #333;
        }
        
        .footer a {
          color: #555;
        }
        
        .social-links a:hover {
          background-color: #333;
        }
        
        .footer-bottom {
          color: #777;
        }
      `;
      
    case 'moderno':
      return `${baseCSS}
        body {
          background-color: #f8f9fa;
        }
        
        h2 {
          position: relative;
        }
        
        h2:after {
          content: '';
          position: absolute;
          bottom: -10px;
          left: 50%;
          transform: translateX(-50%);
          width: 80px;
          height: 3px;
          background: linear-gradient(to right, #007bff, #6610f2);
        }
        
        h2 span {
          color: #6610f2;
        }
        
        .btn-primary {
          background: linear-gradient(to right, #007bff, #6610f2);
          border: none;
          transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .btn-primary:hover {
          transform: translateY(-3px);
          box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .hero {
          position: relative;
          overflow: hidden;
        }
        
        .hero:before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: linear-gradient(135deg, rgba(0,123,255,0.1) 0%, rgba(102,16,242,0.1) 100%);
          z-index: 0;
        }
        
        .hero .container {
          position: relative;
          z-index: 1;
        }
        
        .feature-card {
          border-radius: 20px;
          box-shadow: 0 10px 30px rgba(0,0,0,0.05);
          overflow: hidden;
          border: 1px solid rgba(0,0,0,0.03);
        }
        
        .feature-icon {
          background: linear-gradient(to right, #007bff, #6610f2);
          -webkit-background-clip: text;
          background-clip: text;
          color: transparent;
        }
        
        .step {
          border-radius: 20px;
        }
        
        .step-number {
          background: linear-gradient(to right, #007bff, #6610f2);
        }
        
        .testimonial-card {
          border-radius: 20px;
        }
      `;
      
    case 'corporativo':
      return `${baseCSS}
        body {
          color: #333;
          font-family: 'Montserrat', Arial, sans-serif;
        }
        
        h2 span {
          color: #003366;
        }
        
        .btn-primary {
          background-color: #003366;
          color: white;
        }
        
        .btn-primary:hover {
          background-color: #004080;
        }
        
        .header {
          background-color: white;
        }
        
        .logo span {
          color: #003366;
        }
        
        .nav a:hover {
          color: #003366;
        }
        
        .hero {
          background-color: #f2f5f9;
        }
        
        .feature-icon {
          color: #003366;
        }
        
        .feature-card {
          border: 1px solid #e0e0e0;
        }
        
        .step-number {
          background-color: #003366;
        }
        
        .testimonial-card {
          border: 1px solid #e0e0e0;
        }
        
        .accordion-header {
          background-color: #f2f5f9;
        }
        
        .footer {
          background-color: #003366;
        }
        
        .social-links a:hover {
          background-color: #004080;
        }
      `;
      
    case 'vendas':
    default:
      return `${baseCSS}
        h2 span {
          color: #ff5722;
        }
        
        .btn-primary {
          background-color: #ff5722;
          color: white;
          box-shadow: 0 5px 15px rgba(255,87,34,0.3);
        }
        
        .btn-primary:hover {
          background-color: #e64a19;
          transform: translateY(-2px);
          box-shadow: 0 8px 20px rgba(255,87,34,0.4);
        }
        
        .logo span {
          color: #ff5722;
        }
        
        .hero {
          background: linear-gradient(to right, #f8f9fa, #fbe9e7);
        }
        
        .hero-badge {
          display: flex;
          flex-direction: column;
          gap: 10px;
          margin: 20px 0;
        }
        
        .badge-item {
          display: flex;
          align-items: center;
          gap: 10px;
        }
        
        .badge-item i {
          color: #ff5722;
        }
        
        .product-badge {
          position: absolute;
          top: 20px;
          right: 20px;
          background-color: #ff5722;
          color: white;
          padding: 5px 15px;
          border-radius: 20px;
          font-weight: 700;
          box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }
        
        .feature-icon {
          color: #ff5722;
        }
        
        .step-number {
          background-color: #ff5722;
        }
        
        .countdown {
          background-color: rgba(255,87,34,0.1);
          border: 2px dashed rgba(255,87,34,0.3);
        }
        
        .price-new {
          color: #ff5722;
        }
        
        .offer-badge {
          background-color: rgba(255,87,34,0.1);
          color: #ff5722;
          border: 2px dashed rgba(255,87,34,0.3);
        }
        
        @keyframes pulse {
          0% {
            transform: scale(1);
          }
          50% {
            transform: scale(1.05);
          }
          100% {
            transform: scale(1);
          }
        }
        
        .btn-primary {
          animation: pulse 2s infinite;
        }
      `;
  }
}

// Função para fornecer JavaScript padrão
function getDefaultJS(): string {
  return `
    // Esperar o carregamento do DOM
    document.addEventListener('DOMContentLoaded', function() {
      // Garantir que o Font Awesome esteja carregado
      function loadFontAwesome() {
        if (!document.getElementById('fontawesome-css')) {
          const link = document.createElement('link');
          link.id = 'fontawesome-css';
          link.rel = 'stylesheet';
          link.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css';
          document.head.appendChild(link);
          console.log('Font Awesome carregado dinamicamente');
        }
      }
      
      // Carregar Font Awesome
      loadFontAwesome();
      
      // Contador regressivo
      function startCountdown() {
        const counters = ['timer', 'timer2'];
        
        counters.forEach(timerId => {
          if (!document.getElementById(timerId)) return;
          
          const hoursElement = document.getElementById('hours' + (timerId === 'timer' ? '' : '2'));
          const minutesElement = document.getElementById('minutes' + (timerId === 'timer' ? '' : '2'));
          const secondsElement = document.getElementById('seconds' + (timerId === 'timer' ? '' : '2'));
          
          if (!hoursElement || !minutesElement || !secondsElement) return;
          
          let hours = parseInt(hoursElement.innerText);
          let minutes = parseInt(minutesElement.innerText);
          let seconds = parseInt(secondsElement.innerText);
          
          const interval = setInterval(function() {
            seconds--;
            
            if (seconds < 0) {
              seconds = 59;
              minutes--;
              
              if (minutes < 0) {
                minutes = 59;
                hours--;
                
                if (hours < 0) {
                  clearInterval(interval);
                  hours = 0;
                  minutes = 0;
                  seconds = 0;
                }
              }
            }
            
            hoursElement.innerText = hours.toString().padStart(2, '0');
            minutesElement.innerText = minutes.toString().padStart(2, '0');
            secondsElement.innerText = seconds.toString().padStart(2, '0');
          }, 1000);
        });
      }
      
      // Iniciar o contador
      startCountdown();
      
      // Inicializar todos os tipos de FAQ (tanto accordion padrão como outros estilos de FAQ)
      function initAllFaqs() {
        // 1. Accordion padrão
        const accordionItems = document.querySelectorAll('.accordion-item');
        accordionItems.forEach(function(item) {
          const header = item.querySelector('.accordion-header');
          const content = item.querySelector('.accordion-content');
          
          if (header && content) {
            header.addEventListener('click', function() {
              // Fechar outros itens
              accordionItems.forEach(function(otherItem) {
                if (otherItem !== item) {
                  otherItem.classList.remove('active');
                  const otherContent = otherItem.querySelector('.accordion-content');
                  if (otherContent) {
                    otherContent.style.maxHeight = null;
                  }
                }
              });
              
              // Alternar o atual
              item.classList.toggle('active');
              
              if (item.classList.contains('active')) {
                content.style.maxHeight = content.scrollHeight + 'px';
              } else {
                content.style.maxHeight = null;
              }
            });
          }
        });
        
        // 2. Itens de FAQ classe específica
        const faqItems = document.querySelectorAll('.faq-item');
        faqItems.forEach(function(item) {
          const question = item.querySelector('.faq-question');
          const answer = item.querySelector('.faq-answer');
          
          if (question && answer) {
            question.addEventListener('click', function() {
              // Fechar outros itens
              faqItems.forEach(function(otherItem) {
                if (otherItem !== item) {
                  otherItem.classList.remove('active');
                  const otherAnswer = otherItem.querySelector('.faq-answer');
                  if (otherAnswer) {
                    otherAnswer.style.maxHeight = null;
                  }
                }
              });
              
              // Alternar o atual
              item.classList.toggle('active');
              
              if (item.classList.contains('active')) {
                answer.style.maxHeight = answer.scrollHeight + 'px';
              } else {
                answer.style.maxHeight = null;
              }
            });
          }
        });
        
        // 3. Botões de FAQ soltos (sem estrutura padrão)
        const faqButtons = document.querySelectorAll('button.faq-question');
        faqButtons.forEach(function(button) {
          if (!button.closest('.faq-item')) {
            // Se já está dentro de .faq-item, será tratado pelo código acima
            // Se não, verificamos se está sozinho
            const nextElement = button.nextElementSibling;
            
            if (nextElement) {
              // Adicionar os ouvintes de evento
              button.addEventListener('click', function() {
                // Alternar classes
                button.classList.toggle('active');
                
                // Se usa aria-expanded, atualizar
                if (button.hasAttribute('aria-expanded')) {
                  const isExpanded = button.getAttribute('aria-expanded') === 'true';
                  button.setAttribute('aria-expanded', !isExpanded);
                }
                
                // Afetar o elemento seguinte (resposta)
                if (button.classList.contains('active')) {
                  nextElement.classList.add('active');
                  nextElement.style.maxHeight = nextElement.scrollHeight + 'px';
                  
                  // Girar o ícone se existir
                  const icon = button.querySelector('i');
                  if (icon) {
                    icon.style.transform = 'rotate(180deg)';
                  }
                } else {
                  nextElement.classList.remove('active');
                  nextElement.style.maxHeight = null;
                  
                  // Resetar o ícone
                  const icon = button.querySelector('i');
                  if (icon) {
                    icon.style.transform = '';
                  }
                }
              });
              
              // Inicializar o estilo
              if (!nextElement.style.maxHeight) {
                nextElement.style.maxHeight = '0px';
                nextElement.style.overflow = 'hidden';
                nextElement.style.transition = 'max-height 0.3s ease-out';
              }
            }
          }
        });
      }
      
      // Inicializar FAQs
      initAllFaqs();
      
      // Corrigir imagens quebradas
      function fixBrokenImages() {
        const images = document.querySelectorAll('img');
        
        images.forEach(img => {
          // Adicionar handler para imagens que falham ao carregar
          img.addEventListener('error', function() {
            this.style.opacity = '0';
            this.style.minHeight = '120px';
            this.style.background = '#f0f0f0 url(data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg>) no-repeat center / 64px';
            this.style.border = '1px dashed #ccc';
          });
          
          // Verificar se a imagem está sem src ou src vazio
          if (!img.getAttribute('src') || img.getAttribute('src') === '') {
            img.style.opacity = '0';
            img.style.minHeight = '120px';
            img.style.background = '#f0f0f0 url(data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg>) no-repeat center / 64px';
            img.style.border = '1px dashed #ccc';
          }
        });
      }
      
      // Arrumar imagens quebradas
      fixBrokenImages();
      
      // Animação ao scroll
      const animateElements = document.querySelectorAll('.animate-on-scroll');
      
      function checkIfInView() {
        animateElements.forEach(function(element) {
          const elementTop = element.getBoundingClientRect().top;
          const elementVisible = 150;
          
          if (elementTop < window.innerHeight - elementVisible) {
            element.classList.add('animated');
          }
        });
      }
      
      // Verificar elementos visíveis no carregamento
      checkIfInView();
      
      // Verificar elementos visíveis ao rolar
      window.addEventListener('scroll', checkIfInView);
      
      // Rolagem suave para links âncora
      const anchorLinks = document.querySelectorAll('a[href^="#"]');
      
      anchorLinks.forEach(function(link) {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          
          const targetId = this.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            window.scrollTo({
              top: targetElement.offsetTop - 100,
              behavior: 'smooth'
            });
          }
        });
      });
      
      // Animação para os botões CTA
      const ctaButtons = document.querySelectorAll('.btn-primary');
      
      ctaButtons.forEach(function(button) {
        button.addEventListener('mouseover', function() {
          this.style.transform = 'translateY(-5px)';
          this.style.boxShadow = '0 10px 20px rgba(0,0,0,0.15)';
        });
        
        button.addEventListener('mouseout', function() {
          this.style.transform = '';
          this.style.boxShadow = '';
        });
      });
      
      // Garantir que todos os elementos de Font Awesome estejam carregados
      function loadFontAwesome() {
        if (document.querySelector('i[class*="fa-"]') && !document.getElementById('font-awesome-css')) {
          const link = document.createElement('link');
          link.id = 'font-awesome-css';
          link.rel = 'stylesheet';
          link.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css';
          document.head.appendChild(link);
        }
      }
      
      // Carregar Font Awesome se necessário
      loadFontAwesome();
      
      // Registrar visualização de página nas atividades recentes
      function registerPageView() {
        try {
          // Obter dados básicos da página
          const pageTitle = document.title || 'Landing Page';
          const timestamp = new Date().toISOString();
          
          // Verificar se o storage está disponível
          if (window.localStorage) {
            // Obter atividades existentes ou iniciar um array vazio
            const recentActivities = JSON.parse(localStorage.getItem('recentActivities') || '[]');
            
            // Adicionar atividade atual
            recentActivities.unshift({
              type: 'landing_page_view',
              title: pageTitle,
              timestamp: timestamp,
              url: window.location.href
            });
            
            // Manter apenas as últimas 20 atividades
            const updatedActivities = recentActivities.slice(0, 20);
            
            // Salvar no localStorage
            localStorage.setItem('recentActivities', JSON.stringify(updatedActivities));
            
            console.log('Atividade registrada:', pageTitle);
          }
        } catch (error) {
          console.error('Erro ao registrar atividade:', error);
        }
      }
      
      // Registrar visualização
      registerPageView();
    });
  `;
}

// Função para chamar a API DeepSeek
async function callDeepSeekAPI(prompt: string, mode: 'separated' | 'combined' = 'separated'): Promise<any> {
  try {
    console.log("Iniciando chamada à API DeepSeek...");
    
    // Obter a chave da API do ambiente
    const apiKey = process.env.DEEPSEEK_API_KEY;
    if (!apiKey) {
      throw new Error("Chave da API DeepSeek não configurada");
    }
    
    // Definir os parâmetros da chamada
    const apiUrl = "https://api.deepseek.com/v1/chat/completions";
    const requestData = {
      model: "deepseek-coder-v2",
      messages: [
        {
          role: "system",
          content: "Você é um especialista em desenvolver landing pages profissionais com HTML, CSS e JavaScript. Seu objetivo é criar landing pages de alto impacto visual, com design profissional e elementos interativos que aumentam a taxa de conversão."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 15000,
      temperature: 0.7,
      presence_penalty: 0.2,
      frequency_penalty: 0.3,
      stream: false
    };
    
    // Configuração da requisição
    const requestOptions = {
      method: "POST",
        headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify(requestData)
    };
    
    console.log("Enviando requisição para API DeepSeek...");
    console.log("Tamanho do prompt:", prompt.length, "caracteres");
    
    // Fazer a requisição à API
    const response = await fetch(apiUrl, requestOptions);
    
    // Verificar se a resposta foi bem-sucedida
    if (!response.ok) {
      const errorData = await response.json().catch(() => null);
      console.error("Erro na resposta da API:", response.status, response.statusText);
      console.error("Detalhes do erro:", errorData);
      
      // Se for um erro de conteúdo filtrado, tentar novamente com um prompt ajustado
      if (response.status === 400 && errorData?.error?.message?.includes('content filtered')) {
        console.log("Conteúdo filtrado. Tentando novamente com prompt ajustado...");
        
        // Ajustar o prompt para evitar filtros
        const adjustedPrompt = prompt
          .replace(/vendas/gi, "apresentação")
          .replace(/comprar/gi, "adquirir")
          .replace(/preço/gi, "valor")
          .replace(/pagamento/gi, "aquisição")
          .replace(/dinheiro/gi, "investimento")
          .replace(/desconto/gi, "vantagem");
        
        // Nova requisição com prompt ajustado
        const newRequestData = {
          ...requestData,
          messages: [
            requestData.messages[0],
            {
              role: "user",
              content: adjustedPrompt
            }
          ],
          temperature: 0.5 // Reduzir temperatura para conteúdo mais seguro
        };
        
        const newRequestOptions = {
          ...requestOptions,
          body: JSON.stringify(newRequestData)
        };
        
        console.log("Enviando nova requisição com prompt ajustado...");
        const newResponse = await fetch(apiUrl, newRequestOptions);
        
        if (!newResponse.ok) {
          throw new Error(`Falha na segunda tentativa: ${newResponse.status} ${newResponse.statusText}`);
        }
        
        const newResponseData = await newResponse.json();
        
        if (!newResponseData.choices || newResponseData.choices.length === 0) {
          throw new Error("A API retornou uma resposta vazia na segunda tentativa");
        }
        
        console.log("Resposta recebida da segunda tentativa");
        const content = newResponseData.choices[0].message.content;
        
        // Processar o conteúdo recebido
        return await processAPIResponse(content, mode);
      }
      
      throw new Error(`Erro na chamada da API: ${response.status} ${response.statusText}`);
    }
    
    // Processar a resposta da API
    const responseData = await response.json();
    
    if (!responseData.choices || responseData.choices.length === 0) {
      throw new Error("A API retornou uma resposta vazia");
    }
    
    console.log("Resposta recebida da API DeepSeek");
    const content = responseData.choices[0].message.content;
    
    // Processar o conteúdo recebido
    return await processAPIResponse(content, mode);
  } catch (error) {
    console.error("Erro ao chamar a API DeepSeek:", error);
    return null;
  }
}

// Função para processar a resposta da API
async function processAPIResponse(content: string, mode: 'separated' | 'combined'): Promise<any> {
  try {
    console.log("Processando resposta da API...");
    console.log("Tamanho da resposta:", content.length, "caracteres");
    
    // Extrair os arquivos separados
    const separatedFiles = extractSeparatedFiles(content);
    
    if (!separatedFiles) {
      throw new Error("Não foi possível extrair os arquivos da resposta");
    }
    
    // Verificar se os arquivos extraídos têm conteúdo significativo
    console.log("Tamanhos dos arquivos extraídos:");
    console.log("HTML:", separatedFiles.html.length, "caracteres");
    console.log("CSS:", separatedFiles.css.length, "caracteres");
    console.log("JS:", separatedFiles.js.length, "caracteres");
    
    if (separatedFiles.html.length < 100) {
      throw new Error("HTML extraído muito pequeno");
    }
    
    // Combinar os arquivos em um HTML unificado
    const combinedHTML = createUnifiedHTML(separatedFiles.html, separatedFiles.css, separatedFiles.js);
    
    // Retornar conforme o modo solicitado
    if (mode === 'separated') {
      return {
        separatedFiles,
        combined: combinedHTML
      };
    } else {
      return combinedHTML;
    }
  } catch (error) {
    console.error("Erro ao processar a resposta da API:", error);
    return null;
  }
}

// Função para processar a resposta quando os arquivos não são extraídos corretamente
async function processResponse(content: string): Promise<string> {
  try {
    // Tentar extrair usando a função principal
    const separatedFiles = extractSeparatedFiles(content);
    
    if (separatedFiles) {
      return createUnifiedHTML(separatedFiles.html, separatedFiles.css, separatedFiles.js);
    }
    
    // Fallback: criar um HTML básico com o conteúdo recebido
    console.log("Usando fallback para processamento da resposta");
    return `<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Landing Page</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700;900&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    ${getDefaultCSS("vendas")}
  </style>
</head>
<body>
  <div class="content-wrapper">
    ${content}
  </div>
  <script>
    ${getDefaultJS()}
  </script>
</body>
</html>`;
  } catch (error) {
    console.error("Erro ao processar resposta:", error);
    return `<!DOCTYPE html><html><body><h1>Erro ao gerar landing page</h1><p>${error}</p></body></html>`;
  }
}

// Função para extrair HTML, CSS e JS de uma resposta completa
function extractSeparatedFiles(content: string): { html: string, css: string, js: string } | null {
  try {
    console.log("Iniciando extração de arquivos da resposta...");
    
    // Padrões para extrair os blocos de código - adicionando mais variações
    const htmlPattern = /```(?:html|HTML)[\s\n]*([\s\S]*?)```/i;
    const cssPattern = /```(?:css|CSS)[\s\n]*([\s\S]*?)```/i;
    const jsPattern = /```(?:javascript|js|JavaScript|JS)[\s\n]*([\s\S]*?)```/i;
    
    // Padrões alternativos para casos onde o modelo não formatou corretamente
    const htmlFallbackPattern = /<html[\s\S]*?<\/html>/i;
    const cssFallbackPattern = /<style>([\s\S]*?)<\/style>/i;
    const jsFallbackPattern = /<script>([\s\S]*?)<\/script>/i;
    
    // Tentar extrair com os padrões principais
    let htmlMatch = content.match(htmlPattern);
    let cssMatch = content.match(cssPattern);
    let jsMatch = content.match(jsPattern);
    
    console.log("Encontrou HTML com padrão principal:", !!htmlMatch);
    console.log("Encontrou CSS com padrão principal:", !!cssMatch);
    console.log("Encontrou JS com padrão principal:", !!jsMatch);
    
    // Se não encontrou CSS ou JS com os padrões principais, tentar com os alternativos
    if (!cssMatch && content.includes('<style>')) {
      console.log("Tentando extrair CSS com padrão alternativo");
      cssMatch = content.match(cssFallbackPattern);
      console.log("Encontrou CSS com padrão alternativo:", !!cssMatch);
    }
    
    if (!jsMatch && content.includes('<script>')) {
      console.log("Tentando extrair JS com padrão alternativo");
      jsMatch = content.match(jsFallbackPattern);
      console.log("Encontrou JS com padrão alternativo:", !!jsMatch);
    }
    
    // Se não encontrou HTML com o padrão principal, tentar com o alternativo
    if (!htmlMatch && content.includes('<html')) {
      console.log("Tentando extrair HTML com padrão alternativo");
      htmlMatch = content.match(htmlFallbackPattern);
      console.log("Encontrou HTML com padrão alternativo:", !!htmlMatch);
    }
    
    // Verificar se encontrou pelo menos HTML
    if (!htmlMatch) {
      console.error("Não foi possível encontrar o HTML no conteúdo");
      console.log("Fragmento da resposta:", content.substring(0, 500));
      
      // Última tentativa desesperada para extrair algo
      if (content.includes('<body') || content.includes('<div')) {
        console.log("Tentando extrair conteúdo HTML básico");
        const basicHtml = `<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Landing Page</title>
</head>
<body>
  ${content}
</body>
</html>`;
        
        // Buscar qualquer CSS ou JS em linha que possa existir
        const inlineCSS = content.match(/<style[^>]*>([\s\S]*?)<\/style>/gi);
        const inlineJS = content.match(/<script[^>]*>([\s\S]*?)<\/script>/gi);
        
        let extractedCSS = "/* Estilos para a landing page */\n";
        let extractedJS = "// JavaScript para a landing page\n";
        
        if (inlineCSS) {
          inlineCSS.forEach(style => {
            const cssContent = style.match(/<style[^>]*>([\s\S]*?)<\/style>/i);
            if (cssContent && cssContent[1]) {
              extractedCSS += cssContent[1] + "\n";
            }
          });
        }
        
        if (inlineJS) {
          inlineJS.forEach(script => {
            const jsContent = script.match(/<script[^>]*>([\s\S]*?)<\/script>/i);
            if (jsContent && jsContent[1]) {
              extractedJS += jsContent[1] + "\n";
            }
          });
        }
        
        return {
          html: basicHtml,
          css: extractedCSS,
          js: extractedJS
        };
      }
      
      return null;
    }
    
    // Extrair o conteúdo dos blocos
    let html = htmlMatch[1] ? htmlMatch[1].trim() : "";
    
    // Verificar se o CSS e JS têm tamanho mínimo e qualidade suficiente
    let css = "";
    let js = "";
    
    const CSS_MIN_SIZE = 500; // Tamanho mínimo para CSS ser considerado válido
    const JS_MIN_SIZE = 300;  // Tamanho mínimo para JS ser considerado válido
    
    // Verificar CSS
    if (cssMatch && cssMatch[1]) {
      const extractedCSS = cssMatch[1].trim();
      if (extractedCSS.length > CSS_MIN_SIZE && 
          (extractedCSS.includes("body") || extractedCSS.includes(".container") || extractedCSS.includes("@media"))) {
        console.log("CSS válido encontrado com tamanho:", extractedCSS.length);
        css = extractedCSS;
      } else {
        console.log("CSS extraído parece incompleto (tamanho:", extractedCSS.length, "). Usando CSS padrão");
        css = getDefaultCSS("vendas");
      }
    } else {
      console.log("Nenhum CSS encontrado. Usando CSS padrão");
      css = getDefaultCSS("vendas");
    }
    
    // Verificar JS
    if (jsMatch && jsMatch[1]) {
      const extractedJS = jsMatch[1].trim();
      if (extractedJS.length > JS_MIN_SIZE && 
          (extractedJS.includes("function") || extractedJS.includes("addEventListener") || extractedJS.includes("document."))) {
        console.log("JavaScript válido encontrado com tamanho:", extractedJS.length);
        js = extractedJS;
      } else {
        console.log("JavaScript extraído parece incompleto (tamanho:", extractedJS.length, "). Usando JS padrão");
        js = getDefaultJS();
      }
    } else {
      console.log("Nenhum JavaScript encontrado. Usando JS padrão");
      js = getDefaultJS();
    }
    
    // Verificar se o HTML está completo (tem as tags html, head e body)
    if (!html.includes('<html') || !html.includes('</html>')) {
      html = `<!DOCTYPE html>\n<html lang="pt-BR">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Landing Page</title>\n</head>\n<body>\n${html}\n</body>\n</html>`;
    }
    
    console.log("Extração de arquivos concluída com sucesso");
    console.log("Tamanhos: HTML:", html.length, "CSS:", css.length, "JS:", js.length);
    
    return { html, css, js };
    } catch (error) {
    console.error("Erro ao extrair os arquivos separados:", error);
    return null;
  }
}

// Função para combinar HTML, CSS e JS em um único arquivo
function combineFiles(html: string, css: string, js: string): string {
  try {
    // Verificar se o HTML já tem as tags style e script
    const hasStyleTag = html.includes('<style>');
    const hasScriptTag = html.includes('<script>') && !html.includes('<script src=');
    
    // Se o HTML já tiver tags style e script, verificar se estão completas
    if (hasStyleTag && hasScriptTag && 
        html.includes('</style>') && html.includes('</script>')) {
      return html;
    }
    
    // Usar a função unificada para combinar os arquivos corretamente
    return createUnifiedHTML(html, css, js);
  } catch (error) {
    console.error("Erro ao combinar arquivos:", error);
    return createUnifiedHTML(html, css, js);
  }
}

function createUnifiedHTML(html: string, css: string, js: string): string {
  // Componentes padrão para garantir que a landing page tenha todos os recursos essenciais
  const defaultHeadContent = `
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Landing Page</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;900&family=Open+Sans:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  `;

  try {
    let docType = '<!DOCTYPE html>\n';
    
    // Verificar se o HTML já tem doctype
    if (html.trim().toLowerCase().startsWith('<!doctype')) {
      docType = '';
    }
    
    // Verificar se o HTML fornecido já tem a estrutura completa
    if (html.includes('<html') && html.includes('</html>')) {
      // Extrair partes do HTML para inserir CSS e JS
      const headMatch = html.match(/<head[^>]*>([\s\S]*?)<\/head>/i);
      const bodyMatch = html.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
      
      if (headMatch && bodyMatch) {
        let headContent = headMatch[1];
        let bodyContent = bodyMatch[1];
        
        // Verificar se o head já tem as fontes e font-awesome
        const hasFontAwesome = headContent.includes('font-awesome') || headContent.includes('fontawesome');
        const hasGoogleFonts = headContent.includes('fonts.googleapis.com');
        
        // Adicionar recursos que estão faltando no head
        let additionalHeadContent = '';
        
        if (!hasGoogleFonts) {
          additionalHeadContent += `
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;900&family=Open+Sans:wght@400;500;600;700&display=swap" rel="stylesheet">`;
        }
        
        if (!hasFontAwesome) {
          additionalHeadContent += `
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">`;
        }
        
        // Substitui o conteúdo do head e body
        let newHTML = html;
        
        // Adicionar conteúdo adicional ao head
        if (additionalHeadContent) {
          newHTML = newHTML.replace(/<\/head>/i, `${additionalHeadContent}\n</head>`);
        }
        
        // Adicionar estilos CSS
        if (css && css.trim()) {
          if (newHTML.includes('</style>')) {
            // Se já existe uma tag style, adicionar nosso CSS a ela
            newHTML = newHTML.replace(/<\/style>/i, `${css}\n</style>`);
      } else {
            // Senão, criar uma nova tag style
            newHTML = newHTML.replace(/<\/head>/i, `<style>\n${css}\n</style>\n</head>`);
          }
        }
        
        // Adicionar JavaScript
        if (js && js.trim()) {
          if (newHTML.includes('</script>') && newHTML.includes('<script>')) {
            // Se já existe uma tag script, adicionar nosso JS a ela
            // Encontrar o último script no documento
            const lastScriptIndex = newHTML.lastIndexOf('</script>');
            if (lastScriptIndex !== -1) {
              // Encontrar o início da tag script correspondente
              const scriptStartIndex = newHTML.lastIndexOf('<script', lastScriptIndex);
              if (scriptStartIndex !== -1) {
                // Verificar se é um script inline (sem src)
                const scriptTagContent = newHTML.substring(scriptStartIndex, lastScriptIndex);
                if (!scriptTagContent.includes('src=')) {
                  // É um script inline, podemos adicionar nosso código
                  newHTML = newHTML.substring(0, lastScriptIndex) + js + '\n' + newHTML.substring(lastScriptIndex);
                } else {
                  // É um script externo, adicionar um novo script após ele
                  newHTML = newHTML.replace('</body>', `<script>\n${js}\n</script>\n</body>`);
                }
              }
            }
          } else {
            // Senão, criar uma nova tag script
            newHTML = newHTML.replace('</body>', `<script>\n${js}\n</script>\n</body>`);
          }
        }
        
        return docType + newHTML;
      }
    }
    
    // Se o HTML não tiver a estrutura completa, construir o HTML do zero
    let styleTag = css ? `<style>\n${css}\n</style>` : '';
    let scriptTag = js ? `<script>\n${js}\n</script>` : '';
    
    // Verificar se o HTML contém conteúdo relevante, caso contrário, usar um fallback
    let bodyContent = html.trim();
    if (!bodyContent || bodyContent.length < 100) {
      bodyContent = `
      <div class="container">
        <h1>Landing Page</h1>
        <p>O conteúdo da landing page não pôde ser gerado corretamente.</p>
      </div>`;
    }
    
    // Construir o HTML completo
    return `${docType}<html lang="pt-BR">
<head>
  ${defaultHeadContent}
  ${styleTag}
</head>
<body>
  ${bodyContent}
  ${scriptTag}
</body>
</html>`;
  } catch (error) {
    console.error("Erro ao criar HTML unificado:", error);
    
    // HTML de fallback em caso de erro
    return `<!DOCTYPE html>
<html lang="pt-BR">
<head>
  ${defaultHeadContent}
  <style>
    body { font-family: 'Montserrat', sans-serif; line-height: 1.6; color: #333; padding: 20px; }
    .container { max-width: 800px; margin: 50px auto; padding: 30px; border: 1px solid #ddd; border-radius: 8px; }
    h1 { color: #e74c3c; }
  </style>
</head>
<body>
  <div class="container">
    <h1>Erro ao gerar a landing page</h1>
    <p>Ocorreu um erro ao processar o conteúdo da landing page. Por favor, tente novamente.</p>
    <p><small>Detalhes técnicos: ${error instanceof Error ? error.message : 'Erro desconhecido'}</small></p>
  </div>
</body>
</html>`;
  }
}

// Rota principal para geração de landing pages
export async function POST(request: Request) {
  // Início do tempo de execução
  const startTime = performance.now();
  
  let niche, product, benefits, targetAudience, callToAction, testimonials, pricing, style, separateFiles;
  let productImageUrl = null;
  let userId = '';
  
  // Variáveis para armazenar valores sanitizados
  let safeNiche = '', safeProduct = '', safeStyle = '', safeBenefits: string[] = [], safeTargetAudience = '', safeCallToAction = '', safePricing = '';
  
  try {
    // Verificar o tipo de conteúdo da requisição
    const contentType = request.headers.get('content-type') || '';
    
    // Se for multipart form-data, processar o upload de imagem
    if (contentType.includes('multipart/form-data')) {
      const formData = await request.formData();
      
      // Obter os dados JSON da requisição
      const jsonData = formData.get('data');
      if (!jsonData || typeof jsonData !== 'string') {
        throw new Error("Dados JSON ausentes ou inválidos");
      }
      
      const parsedData = JSON.parse(jsonData);
      
      // Extrair os campos do formulário
      niche = parsedData.niche || '';
      product = parsedData.product || '';
      benefits = parsedData.benefits || [];
      targetAudience = parsedData.targetAudience || '';
      callToAction = parsedData.callToAction || 'Comprar Agora';
      testimonials = parsedData.testimonials || [];
      pricing = parsedData.pricing || '';
      style = parsedData.style || 'vendas';
      separateFiles = parsedData.separateFiles || false;
      userId = parsedData.userId || '';
      
      // Processar o upload da imagem, se houver
      const productImage = formData.get('productImage');
      if (productImage && productImage instanceof File && productImage.size > 0) {
        try {
          const buffer = Buffer.from(await productImage.arrayBuffer());
          const fileName = `product-${Date.now()}-${Math.round(Math.random() * 10000)}.${productImage.name.split('.').pop()}`;
          const uploadDir = path.join(process.cwd(), 'public', 'uploads');
          
          // Criar o diretório de upload se não existir
          if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
          }
          
          const filePath = path.join(uploadDir, fileName);
          await writeFile(filePath, buffer);
          
          productImageUrl = `/uploads/${fileName}`;
          console.log(`Imagem salva em: ${filePath}`);
        } catch (uploadError) {
          console.error("Erro ao processar o upload da imagem:", uploadError);
          // Continuar sem a imagem em caso de erro
        }
      }
    } else {
      // Requisição JSON padrão
      const data = await request.json();
      
      niche = data.niche || '';
      product = data.product || '';
      benefits = data.benefits || [];
      targetAudience = data.targetAudience || '';
      callToAction = data.callToAction || 'Comprar Agora';
      testimonials = data.testimonials || [];
      pricing = data.pricing || '';
      style = data.style || 'vendas';
      separateFiles = data.separateFiles || false;
      userId = data.userId || '';
      
      // Se houver URL de imagem no JSON
      if (data.productImageUrl) {
        productImageUrl = data.productImageUrl;
      }
    }
    
    // Sanitizar entradas
    safeNiche = niche.trim();
    safeProduct = product.trim();
    safeStyle = style.trim().toLowerCase();
    safeBenefits = benefits.map((b: string) => b.trim()).filter((b: string) => b.length > 0);
    safeTargetAudience = targetAudience.trim();
    safeCallToAction = callToAction.trim();
    safePricing = pricing.trim();
    
    // Validar dados mínimos
    if (!safeNiche || !safeProduct) {
      return new NextResponse("Nicho e produto são campos obrigatórios", { status: 400 });
    }
    
    console.log("Gerando landing page para:", {
      niche: safeNiche,
      product: safeProduct,
      style: safeStyle,
      benefits: safeBenefits.length
    });
    
    try {
      // Montar o prompt para a API com instruções claras
      const template = getTemplateByStyle(safeStyle);
      const prompt = `Você é um especialista em criação de landing pages para ${safeNiche}. 
      Crie uma landing page de alta conversão para promover o produto: "${safeProduct}". 
      
      Detalhes do produto:
      - Nicho: ${safeNiche}
      - Público-alvo: ${safeTargetAudience}
      - Principais benefícios: ${safeBenefits.join(', ')}
      - Call to action principal: ${safeCallToAction}
      - Preço/oferta: ${safePricing}
      
      Requisitos da página:
      1. Use o estilo "${safeStyle}" para a landing page.
      2. Crie uma página HTML completa com tags head e body.
      3. Inclua HTML semântico e responsivo.
      4. Adicione CSS detalhado e personalizado para o nicho específico.
      5. Inclua JavaScript para melhorar interatividade (FAQ, contadores, formulários).
      6. Adicione seções: hero, benefícios, como funciona, depoimentos, FAQ, garantia e CTA final.
      7. Use Font Awesome para ícones via CDN.
      8. Use a fonte Montserrat do Google Fonts.
      9. Garanta que os estilos dos botões FAQ funcionem corretamente.
      10. Adicione código JavaScript para expandir/contrair FAQ automaticamente.
      
      Formato esperado: Estruture sua resposta com os arquivos separados, indicados por delimitadores:
      
      \`\`\`html
      <!-- Código HTML completo aqui -->
      \`\`\`
      
      \`\`\`css
      /* CSS completo aqui */
      \`\`\`
      
      \`\`\`javascript
      // JavaScript completo aqui
      \`\`\`
      
      Certifique-se que o JavaScript detecta automaticamente como o FAQ está estruturado (botões, divs ou dl/dt/dd) e inicializa o comportamento correto.`;
      
      // Chamar a API de geração de conteúdo
      const response = await fetch("https://api.deepseek.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${process.env.DEEPSEEK_API_KEY}`
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: [
            { role: "user", content: prompt }
          ],
          temperature: 0.7,
          max_tokens: 4000
        })
      });
      
      if (!response.ok) {
        console.error(`Erro na API: ${response.status} ${response.statusText}`);
        throw new Error(`Erro na API: ${response.status} ${response.statusText}`);
      }

      // Extrair o conteúdo da resposta
      const data = await response.json();
      console.log("Resposta recebida da API");
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message || !data.choices[0].message.content) {
        throw new Error("Resposta da API em formato inválido");
      }

      const responseContent = data.choices[0].message.content;
      
      // Registrar o tempo da resposta inicial
      console.log(`API respondeu em ${Math.round(performance.now() - startTime)}ms`);
      
      // Processar e extrair os componentes da landing page
      const filesResult = extractSeparatedFiles(responseContent);
      
      if (!filesResult) {
        console.error("Falha na extração dos arquivos, usando fallback");
        return createFallbackLandingPage(safeNiche, safeProduct, safeStyle, safeBenefits, safeTargetAudience, safeCallToAction, safePricing, productImageUrl);
      }
      
      const { html, css, js } = filesResult;
      
      if (!html || html.length < 200) {
        console.error("HTML extraído é muito curto ou vazio, usando fallback");
        return createFallbackLandingPage(safeNiche, safeProduct, safeStyle, safeBenefits, safeTargetAudience, safeCallToAction, safePricing, productImageUrl);
      }

      console.log("Conteúdo extraído com sucesso:", {
        htmlLength: html.length,
        cssLength: css.length,
        jsLength: js.length
      });

      // Se o usuário solicitou arquivos separados, retornar os componentes
      if (separateFiles) {
        const combinedHTML = createUnifiedHTML(html, css, js);
        
        return NextResponse.json({
          separatedFiles: {
            html: html,
            css: css,
            js: js
          },
          code: combinedHTML
        }, { 
          status: 200 
        });
      } else {
        // Combinar os componentes em um único HTML
        const landingPageHTML = createUnifiedHTML(html, css, js);
        
        // Finalizar tempo de execução e registrar atividade
        const endTime = performance.now();
        const executionTime = ((endTime - startTime) / 1000).toFixed(2);
        console.log(`Landing page gerada em ${executionTime}s`);
        
        // Registrar a criação da landing page (sem depender de MongoDB)
        try {
          if (userId) {
            console.log('Atividade de landing page registrada para usuário:', userId, {
              tipo: 'landing_page',
              produto: safeProduct,
              nicho: safeNiche,
              estilo: safeStyle,
              tempo: executionTime
            });
          }
        } catch (activityError) {
          console.error('Erro ao registrar atividade:', activityError);
          // Não interromper o fluxo se o registro falhar
        }
        
        // Retornar a página HTML completa
        return new NextResponse(landingPageHTML, {
          status: 200,
          headers: {
            'Content-Type': 'text/html; charset=utf-8'
          }
        });
      }
    } catch (apiError) {
      console.error("Erro ao chamar a API DeepSeek:", apiError);
      return createFallbackLandingPage(safeNiche, safeProduct, safeStyle, safeBenefits, safeTargetAudience, safeCallToAction, safePricing, productImageUrl);
    }
  } catch (error) {
    console.error("Erro no processamento:", error);
    return new NextResponse(`Erro ao gerar a landing page: ${error instanceof Error ? error.message : String(error)}`, {
      status: 500
    });
  }
}

// Função para criar uma landing page de fallback em caso de erro
function createFallbackLandingPage(niche: string, product: string, style: string, benefits: string[], targetAudience: string, callToAction: string, pricing: string, productImageUrl: string | null = null) {
  console.log("Criando landing page de fallback");
  
  const productImageHtml = productImageUrl 
    ? `<img src="${productImageUrl}" alt="${product}" class="hero-image" />`
    : `<div class="hero-image" style="background-image: url('https://via.placeholder.com/600x400');">
        <div class="product-badge">NOVO</div>
      </div>`;
  
  const fallbackHTML = `<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${product} - ${niche}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
      ${getDefaultCSS(style)}
    </style>
</head>
<body>
    <header class="header">
        <div class="container">
            <a href="#" class="logo">${product}<span>.</span></a>
            <nav class="nav">
                <ul>
                    <li><a href="#beneficios">Benefícios</a></li>
                    <li><a href="#como-funciona">Como Funciona</a></li>
                    <li><a href="#depoimentos">Depoimentos</a></li>
                    <li><a href="#faq">FAQ</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <section class="hero">
        <div class="container">
            <div class="hero-content">
                <h1>${product}</h1>
                <p class="subheadline">A solução ideal para ${targetAudience}</p>
                <div class="hero-badge">
                    ${benefits.map((benefit: string) => `
                    <div class="badge-item">
                        <i class="fas fa-check-circle"></i>
                        <span>${benefit}</span>
                    </div>
                    `).join('')}
                </div>
                <div class="countdown">
                    <p>Oferta por tempo limitado!</p>
                    <div id="timer">
                        <span id="hours">23</span>:<span id="minutes">59</span>:<span id="seconds">59</span>
                    </div>
                </div>
                <a href="#oferta" class="btn btn-primary btn-large">${callToAction}</a>
                <div class="secure-checkout">
                    <i class="fas fa-lock"></i>
                    <span>Compra 100% segura</span>
                </div>
            </div>
            ${productImageHtml}
        </div>
    </section>

    <section id="beneficios" class="features">
        <div class="container">
            <h2>Principais <span>Benefícios</span></h2>
            <div class="features-grid">
                ${benefits.map((benefit: string, index: number) => `
                <div class="feature-card animate-on-scroll">
                    <div class="feature-icon">
                        <i class="fas fa-${['star', 'check-circle', 'thumbs-up', 'bolt', 'award'][index % 5]}"></i>
                    </div>
                    <h3>${benefit}</h3>
                    <p>Aproveite todos os benefícios que o ${product} oferece para transformar sua experiência no nicho de ${niche}.</p>
                </div>
                `).join('')}
            </div>
        </div>
    </section>

    <section class="cta-section">
        <div class="container">
            <h2>Garanta seu ${product} agora</h2>
            <p>Por apenas ${pricing} você tem acesso a todos esses benefícios</p>
            <a href="#" class="btn btn-primary btn-large">${callToAction}</a>
        </div>
    </section>

    <script>
      ${getDefaultJS()}
    </script>
</body>
</html>`;

  // Retornar a página HTML de fallback
  return new NextResponse(fallbackHTML, {
    status: 200,
    headers: {
      'Content-Type': 'text/html; charset=utf-8'
    }
  });
} 